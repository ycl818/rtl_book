[{"content":"import { render, screen } from \"@testing-library/react\";\r\n\r\nfunction ColorList() {\r\n  return (\r\n    <ul> \r\n      <li>Red</li> \r\n      <li>Blue</li> \r\n      <li>Green</li> \r\n    </ul>\r\n  )\r\n}\r\n\r\nrender(<ColorList/>)","type":"code","id":"vl1r0"},{"content":"## Looking for single element","type":"text","id":"n0ydo"},{"content":"test(\"getBy, queryBy, findBy finding 0 elements\", async () => {\r\n  render(<ColorList />)\r\n\r\n  expect(() => screen.getByRole('textbox')).toThrow();\r\n\r\n  expect(screen.queryByRole('textbox')).toEqual(null)\r\n\r\n  let errorThrown = false\r\n  try {\r\n    await screen.findByRole('textbox')\r\n  } catch(err) {\r\n    errorThrown = true\r\n  }\r\n  expect(errorThrown).toEqual(true)\r\n})","type":"code","id":"mnj1w"},{"content":"test('getBy, queryBy, findBy when they find 1 element', async() => {\r\n  render(<ColorList />)\r\n\r\n  expect(screen.getByRole('list')).toBeInTheDocument();\r\n\r\n  expect(screen.queryByRole('list')).toBeInTheDocument();\r\n  expect(await screen.findByRole('list')).toBeInTheDocument();\r\n})","type":"code","id":"72in4"},{"content":"test('getBy, queryBy, findBy when they find > 1 elements', async() => {\r\n  render(<ColorList />)\r\n\r\n  expect(() => screen.getByRole('listitem')).toThrow();\r\n  expect(() => screen.queryByRole('listitem')).toThrow();\r\n \r\n\r\n  let errorThrown = false\r\n  try {\r\n    await screen.findByRole('listitem')\r\n  } catch(err) {\r\n    errorThrown = true\r\n  }\r\n  expect(errorThrown).toEqual(true)\r\n})","type":"code","id":"an1q2"},{"content":"## Looking for multiple elements","type":"text","id":"d4ilt"},{"content":"test('getAllBy, queryAllBy, findAllBy when they find > 1 elements', async() => {\r\n  render(<ColorList />)\r\n\r\n  expect(screen.getAllByRole('listitem')).toHaveLength(3)\r\n  expect(screen.queryAllByRole('listitem')).toHaveLength(3)\r\n  expect(await screen.findAllByRole('listitem')).toHaveLength(3)\r\n}) ","type":"code","id":"tdkri"},{"content":"test(\"favor using getBy to prove an element exists\", () => {\r\n  render(<ColorList />)\r\n\r\n  const element = screen.getByRole('list')\r\n  expect(element).toBeInTheDocument()\r\n})","type":"code","id":"gp62q"},{"content":"test(\"test queryBy when proving an element does not exist\", () => {\r\n  render(<ColorList />)\r\n\r\n  const element = screen.queryByRole('textBox');\r\n\r\n  expect(element).not.toBeInTheDocument()\r\n})","type":"code","id":"17ru4"},{"content":"import { useState, useEffect } from 'react';\r\n\r\nfunction fetchColors() {\r\n  return Promise.resolve(\r\n    ['red', 'green', 'blue']\r\n  )\r\n}\r\n\r\nfunction LoadableColorList() {\r\n  const [colors, setColors] = useState([])\r\n\r\n  useEffect(() => {\r\n    fetchColors()\r\n    .then(c => setColors(c));\r\n  }, [])\r\n\r\n  const renderedColors = colors.map(color => {return <li key={color}>{color}</li>})\r\n\r\n  return <ul>{renderedColors}</ul>\r\n}\r\n\r\nrender(<LoadableColorList />)\r\n","type":"code","id":"krl8c"},{"content":"test('Favor findBy or findAllBy when data fetching', async() => {\r\n\r\n  render(<LoadableColorList />)\r\n\r\n  const els = await screen.findAllByRole('listitem')\r\n  expect(els).toHaveLength(3)\r\n\r\n})","type":"code","id":"q9b67"}]